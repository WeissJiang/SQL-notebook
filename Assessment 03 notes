--Qualifiers
SELECT last_name -- Un-qualified column
FROM   employees;
SELECT employees.last_name -- Qualified column
FROM   employees;
SELECT e.last_name -- Qualified column with a table alias
FROM   employees e; --e is a table alias. Can't use AS keyword
----------------------------------------------------------------------------------------------
SELECT last_name, e.job_id "Job", jh.job_id "Old Job", end_date
FROM employees e
JOIN job_history jh ON (e.employee_id = jh.employee_id);

SELECT last_name, e.job_id "Job", jh.job_id "Old Job", end_date
FROM employees e
JOIN job_history jh USING (employee_id);

SELECT last_name, e.job_id "Job", jh.job_id "Old Job", end_date
FROM employees e
LEFT OUTER JOIN job_history jh ON (e.employee_id = jh.employee_id);
----------------------------------------------------------------------------------------------
SELECT employee_id, last_name, location_id, department_id
FROM   employees 
JOIN   departments USING (department_id);

SELECT e.employee_id, e.last_name, d.department_name, e.department_id        
FROM   employees e 
JOIN   departments d ON (e.department_id = d.department_id);
----------------------------------------------------------------------------------------------
SELECT employee_id, city, department_name
FROM   employees e 
JOIN   departments d ON d.department_id = e.department_id 
JOIN   locations l   ON d.location_id = l.location_id;

SELECT employee_id, city, department_name
FROM   employees e 
JOIN   departments d USING (department_id)
JOIN   locations l   ON d.location_id = l.location_id;

SELECT employee_id, city, department_name
FROM   employees 
JOIN   departments  USING (department_id)
JOIN   locations    USING (location_id);
----------------------------------------------------------------------------------------------
--This query is SQL1999 Compliant:
SELECT last_name, department_name
FROM   departments d 
JOIN   employees e ON (e.department_id = d.department_id);

--This query is NOT SQL1999 Compliant - DO NOT USE
SELECT last_name, department_name
FROM   departments d, employees e 
WHERE  e.department_id = d.department_id;
----------------------------------------------------------------------------------------------
SELECT e.department_id, d.department_id
FROM departments d
JOIN employees e ON (e.department_id = d.department_id); (106rows)
VS
SELECT e.department_id, d.department_id
FROM departments d
LEFT OUTER JOIN employees e ON (e.department_id = d.department_id); (122rows)

SELECT e.department_id, d.department_id
FROM departments d
LEFT OUTER JOIN employees e USING (department_id);   
-- Columns that are used for a named-join (either a NATURAL join or a join with a USING clause) cannot have an explicit qualifier.

SELECT department_id
FROM departments
JOIN employees USING (department_id); (106rows)
VS
SELECT department_id
FROM departments
LEFT OUTER JOIN employees USING (department_id); (122rows)

SELECT last_name, department_name
FROM departments d
LEFT OUTER JOIN employees e ON (e.department_id = d.department_id);
VS
SELECT last_name,department_name
FROM departments
LEFT OUTER JOIN employees USING (department_id);
(same result) 
-------------------------------------------------------------------------------------------
Difference between USING and ON clause
1.Different column name
SELECT department_name, city
FROM departments
JOIN locations
USING (location_id); 		-- specify the same column name 
                       -- for both of the tables for the join
SELECT department_name, city
FROM departments dept
JOIN locations loc
ON (dept.location_id = loc.id);	 -- specify different column name 
                            -- for the tables for the join.

2.Preserves the columns from each joined table separately
A.id  B.id
1      1
2      2
3      3
Select * from A JOIN B using(id);
Output will be
id
1
2
3
Select * from A JOIN B on A.id=B.id;
Output will be.
id     id
1      1
2      2
3      3

3.Column part of USING clause cannot have qualifier (common的列名前不可有qualifier).
SELECT department_id, last_name
FROM departments d
LEFT OUTER JOIN employees e USING (department_id)
WHERE e.department_id > 50;  (×)

SELECT department_id, last_name
FROM departments d
LEFT OUTER JOIN employees e USING (department_id)
WHERE department_id > 50;   (√)

SELECT department_id, last_name
FROM departments d
LEFT OUTER JOIN employees e USING (department_id)
WHERE e.last_name > 'S';     (×)
-------------------------------------------------------------------------------------------
WHY ON clause?
The columns to be joined have different names1, and the join uses non-equality comparison operators2 such as <, >, or BETWEEN.
SELECT last_name, salary, grade_level, lowest_sal, highest_sal
FROM employees
JOIN job_ grades ON (salary BETWEEN lowest_sal AND highest_sal);

WHY INNER And OUTER Joins
In ANSI-99 SQL, a join of two or more tables that returns only
the matched rows is called an inner join.
When a join returns the unmatched rows as well as the
matched rows, it is called an outer join.
-------------------------------------------------------------------------------------------
PRACTICE
1.Which of queries return the departments where no employees are currently working?
SELECT d.*
FROM departments d
LEFT OUTER JOIN employees e 
ON (d.department_id = e.department_id)
WHERE e.employee_id IS NULL;

2.Show Cities and all matching Countries. The format of your output should look like this:
CITY         COUNTRY_NAME            
------------ ------------------------
Toronto      Canada                  
Oxford       United Kingdom          
Southlake    United States of America

SELECT city, country_name
FROM locations
JOIN countries USING (country_id);

3.Show the City and Country_name of all countries that start with letters between A and C.  Include countries that do not have any cities.  The format of your output should look like this:
CITY      COUNTRY_NAME   
--------- ---------------
(null)    Argentina      
(null)    Australia      
(null)    Belgium        
(null)    Brazil         
Toronto   Canada         
(null)    China

SELECT l.city, c.country_name
FROM locations l
RIGHT OUTER JOIN countries c ON (l.country_id = c.country_id)
WHERE SUBSTR(country_name, 1, 1) BETWEEN 'A' AND 'C';
OR
SELECT city, country_name
FROM locations
RIGHT OUTER JOIN countries USING (country_id)
WHERE SUBSTR(country_name, 1, 1) BETWEEN 'A' AND 'C';

4.The HR department needs a report of employees in Toronto. Display the last name, job, department number, and the department name for all employees who work in Toronto.

SELECT last_name, job_id, department_id, department_name
FROM employees
JOIN departments USING (department_id)
JOIN locations USING (location_id)
WHERE city = 'Toronto';
OR
SELECT e.last_name, e.job_id, e.department_id, d.department_name
FROM employees e
JOIN departments d ON(e.department_id = d.department_id)
JOIN locations l ON (d.location_id = l.location_id)
WHERE LOWER(l.city) = 'toronto';

5.Use SQL Developer to show the Cities and Country names of all Locations with Country names alphabetically higher than 'S'.  Include Countries that do not have any Locations.  The format of your output should look like this (you may get more data):

SELECT city, country_name
FROM locations l
RIGHT OUTER JOIN countries c USING (country_id)
WHERE country_name > 'S';

6.Use SQL Developer to show the department name and employee last name of departments IDs 20, 110 and 190.  Include departments that do not have any employees.  The format of your output should look like this (you may get different data):

SELECT department_name, last_name
FROM departments d
LEFT OUTER JOIN employees e ON (d.department_id = e.department_id)
WHERE d.department_id IN (20, 110, 190);
OR
SELECT department_name, last_name
FROM departments d
LEFT OUTER JOIN employees e USING (department_id)
WHERE department_id IN (20, 110, 190);

